<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="/external-stylesheets.css">
  </head>
  <body>
    <script src="/external-javascripts.js"></script>
    <script src="/runtime.js"></script>
    <script>
      class TestRunner {
        constructor () {
          this.socket = new WebSocket("<%= ws_url %>")

          window.DEBUG = {
            log: (value) => {
              let result = ""

              if (value === undefined) {
                result = "undefined"
              } else if (value === null) {
                result = "null"
              } else {
                result = value.toString()
              }

              this.log(result)
            }
          }

          let error = null

          window.onerror = (message) => {
            if (this.socket.readyState === 1) {
              this.crash(message)
            } else {
              error = error || message
            }
          }

          this.socket.onopen = () => {
            if (error != null) {
              this.crash(error)
            }
          }
        }

        start (suites) {
          this.suites = suites
          if (this.socket.readyState === 1) {
            this.run()
          } else {
            this.socket.addEventListener("open", () => this.run())
          }
        }

        run () {
          return new Promise((resolve, reject) => {
            this.next(resolve, reject)
          }).catch(e => this.log(e.reason))
            .finally(() => this.socket.send("DONE"))
        }

        report (type, suite, name, message, location) {
          if (message && message.toString) {
            message = message.toString()
          }
          this.socket.send(JSON.stringify({
            type: type,
            suite: suite,
            name: name,
            result: message,
            location: location
          }))
        }

        reportTested (test, type, message) {
          this.report(type, this.suite.name, test.name, message, test.location)
        }

        crash (message) {
          this.report("CRASHED", null, null, message)
        }

        log (message) {
          this.report("LOG", null, null, message)
        }

        next (resolve, reject) {
          requestAnimationFrame(async () => {
            if (!this.suite || this.suite.tests.length === 0) {
              this.suite = this.suites.shift()

              if (this.suite) {
                this.report("SUITE", this.suite.name)
              } else {
                return resolve()
              }
            }

            const currentHistory = window.history.length

            const test = this.suite.tests.shift()

            try {
              const result = await test.proc(this.suite.constants)

              // Go back to the beginning
              if (window.history.length - currentHistory) {
                window.history.go(-(window.history.length - currentHistory))
              }

              // Clear storages
              sessionStorage.clear()
              localStorage.clear()

              // TODO: Reset Stores

              if (result instanceof TestContext) {
                try {
                  await result.run()
                  this.reportTested(test, "SUCCEEDED", result.subject)
                } catch (error) {
                  this.reportTested(test, "FAILED", error)
                }
              } else {
                if (result) {
                  this.reportTested(test, "SUCCEEDED")
                } else {
                  this.reportTested(test, "FAILED")
                }
              }
            } catch (error) {
              // An error occurred while trying to run a test; this is different from the test itself failing.
              this.reportTested(test, "ERRORED", error)
            }
            this.next(resolve, reject)
          })
        }
      }

      window.testRunner = new TestRunner()
    </script>
    <script src="/tests"></script>
    <script>
      window.testRunner.start(SUITES)
    </script>
    <div id="root">
    </div>
  </body>
</html>
