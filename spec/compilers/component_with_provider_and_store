type MouseProvider.Data {
  moves : Function(Position, Void),
  ups : Function(Position, Void)
}

provider MouseProvider : MouseProvider.Data {
  fun update : Void {
    void
  }
}

store Blah {
  state test : String = ""

  fun x : String {
    "hello"
  }
}

component Main {
  use MouseProvider {
    moves: (data : Position) : Void { void },
    ups: (data : Position) : Void { void }
  } when {
    false
  }

  connect Blah exposing { test, x }

  fun render : Html {
    <div/>
  }
}
--------------------------------------------------------------------------------
import {
  createProvider as B,
  createElement as D,
  signal as A,
  useId as C
} from "./runtime.js";

export const
  a = () => {
    return `hello`
  },
  b = A(``),
  c = new Map(),
  E = B(c, () => {
    return null
  }),
  F = () => {
    const d = C();
    E(d, () => {
      return (false ? {
        moves: (e) => {
          return null
        },
        ups: (f) => {
          return null
        }
      } : null)
    });
    return D(`div`, {})
  };
