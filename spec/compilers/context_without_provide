type Form {
  set: Function(String, String, Promise(Void)),
  get: Function(String, String)
} context {
  set: (a: String, b: String) { await void },
  get: (a: String) { "" }
}

type Maybe(a) {
  Nothing
  Just(a)
}

type Result(err, value) {
  Ok(value)
  Err(err)
}

component Input {
  property name : String
  context form : Form

  fun handleClick {
    form.set(name, form.get(name) + "1")
  }

  fun render {
    <button onClick={handleClick}>
      "Change!"
    </button>
  }
}

component Main {
  state form : Map(String, String) = {} of String => String

  fun render {
    <div>
      <Input name="firstname"/>
      <Input name="lastname"/>
    </div>
  }
}
--------------------------------------------------------------------------------
import {
  createElement as E,
  createContext as C,
  useContext as D,
  useSignal as F,
  variant as A,
  record as B
} from "./runtime.js";

export const
  G = A(0, `Maybe.Nothing`),
  H = A(1, `Maybe.Just`),
  I = A(1, `Result.Ok`),
  J = A(1, `Result.Err`),
  a = B(`Form`),
  K = C(a({
    set: async (b, c) => {
      return await null
    },
    get: (d) => {
      return ``
    }
  })),
  L = ({
    e
  }) => {
    const
      f = () => {
        return g.set(e, g.get(e) + `1`)
      },
      g = D(K);
    return E(`button`, {
      "onClick": f
    }, [`Change!`])
  },
  M = () => {
    const h = F([]);
    return E(`div`, {}, [
      E(L, {
        e: `firstname`
      }),
      E(L, {
        e: `lastname`
      })
    ])
  };
