enum Maybe(value) {
  Just(value)
  Nothing
}

component Instance {
  get name : String {
    "Instance"
  }

  fun render : Html {
    <div></div>
  }
}

component Main {
  fun handleClick : String {
    case (instance) {
      Maybe::Just(component) => component.name
      Maybe::Nothing => ""
    }
  }

  fun render : Html {
    <div onClick={handleClick}>
      <Instance as instance/>
    </div>
  }
}
--------------------------------------------------------------------------------
class C extends _E {
  constructor(_0) {
    super();
    this._0 = _0;
    this.length = 1;
  }
};

class D extends _E {
  constructor() {
    super();
    this.length = 0;
  }
};

class A extends _C {
  get a() {
    return `Instance`
  }

  render() {
    return _h("div", {});
  }
};

A.displayName = "Instance";

class B extends _C {
  get c() {
    return (this._instance ? new C(this._instance) : new D);
  }

  b() {
    return _match(this.c,[
      [
        _PE(C,[
          _PV
        ]),
        (d) => {
          return d.a
        }
      ],
      [
        _PE(D,[]),
        () => {
          return ``
        }
      ]
    ]);
  }

  render() {
    return _h("div", {
      "onClick": (event => (this.b)(_normalizeEvent(event)))
    }, [
      _h(A, {
        ref: (instance) => { this._instance = instance }
      })
    ]);
  }
};

B.displayName = "Main";
