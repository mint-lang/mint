record MouseProvider.Data {
  moves : Function(Position, Void),
  ups : Function(Position, Void)
}

provider MouseProvider : MouseProvider.Data {
  fun update : Void {
    void
  }
}

component Main {
  use MouseProvider {
    moves: (data : Position) : Void { void },
    ups: (data : Position) : Void { void }
  } when {
    false
  }

  fun componentWillUnmount : Void {
    void
  }

  fun componentDidUpdate : Void {
    void
  }

  fun componentDidMount : Void {
    void
  }

  fun render : Html {
    <div/>
  }
}
--------------------------------------------------------------------------------
import {
  createProvider as B,
  createElement as G,
  useDidUpdate as F,
  useEffect as E,
  useId as D
} from "runtime";

const
  a = new Map(),
  A = B(a, () => {
    return null
  }),
  C = () => {
    const b = D();
    E(() => {
      (() => {
        return null
      })();
      return () => {
        return null
      }
    }, []);
    F(() => {
      return null
    });
    A(b, (false ? {
      moves: (c) => {
        return null
      },
      ups: (d) => {
        return null
      }
    } : null));
    return G(`div`, {})
  };
