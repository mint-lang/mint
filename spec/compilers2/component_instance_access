enum Maybe(value) {
  Just(value)
  Nothing
}

component Instance {
  get name : String {
    "Instance"
  }

  fun render : Html {
    <div></div>
  }
}

component Main {
  fun handleClick : String {
    case (instance) {
      Maybe::Just(component) => component.name
      Maybe::Nothing => ""
    }
  }

  fun render : Html {
    <div onClick={handleClick}>
      <Instance as instance/>
    </div>
  }
}
--------------------------------------------------------------------------------
import {
  patternVariable as K,
  createElement as F,
  computed as E,
  pattern as J,
  variant as B,
  signal as H,
  match as I
} from "runtime";

const
  A = B(1),
  C = B(0),
  D = () => {
    const a = E(() => {
      return `Instance`
    });
    return F("div", {})
  },
  G = () => {
    const
      b = H(new C()),
      c = () => {
        return I(b.value, [
          [
            J(A, [K]),
            (d) => {
              return d.a
            }
          ],
          [
            J(C, []),
            () => {
              return ``
            }
          ]
        ])
      };
    return F("div", {
      "onClick": c
    }, [F(D, {
      ref: (e) => {
        b.value = new A(e)
      }
    })])
  };
