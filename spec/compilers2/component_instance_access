enum Maybe(value) {
  Just(value)
  Nothing
}

component Instance {
  get name : String {
    "Instance"
  }

  fun render : Html {
    <div></div>
  }
}

component Main {
  fun handleClick : String {
    case (instance) {
      Maybe::Just(component) => component.name
      Maybe::Nothing => ""
    }
  }

  fun render : Html {
    <div onClick={handleClick}>
      <Instance as instance/>
    </div>
  }
}
--------------------------------------------------------------------------------
import {
  patternVariable as M,
  createElement as G,
  useFunction as J,
  useComputed as E,
  pattern as L,
  useMemo as F,
  variant as B,
  setRef as N,
  useRef as I,
  match as K
} from "runtime";

const
  A = B(1),
  C = B(0),
  D = ({
    _
  }) => {
    const a = E(() => {
      return `Instance`
    });
    const b = F(() => {
      return {
        a
      }
    }, []);
    _(b);
    return G(`div`, {})
  },
  H = () => {
    const
      c = I(new C()),
      d = J(() => {
        return K(c.current, [
          [
            L(A, [M]),
            (e) => {
              return e.a
            }
          ],
          [
            L(C, []),
            () => {
              return ``
            }
          ]
        ])
      });
    return G(`div`, {
      "onClick": d
    }, [G(D, {
      _: N(c, A)
    })])
  };
