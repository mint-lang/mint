enum A(a) {
  B(a)
}

enum C(a) {
  D(A(a))
  X
}

component Main {
  fun test (b : C(a)) : a {
    case (b) {
      C::X => ""
      C::D(a) =>
        case (a) {
          A::B(c) =>
            c
        }
    }
  }

  fun render : String {
    test(C::D(A::B("")))

    ""
  }
}
--------------------------------------------------------------------------------
import {
  patternVariable as H,
  newVariant as I,
  pattern as G,
  variant as B,
  match as F
} from "runtime";

const
  A = B(1),
  C = B(1),
  D = B(0),
  E = () => {
    const a = (b) => {
      return F(b, [
        [
          G(D, []),
          () => {
            return ``
          }
        ],
        [
          G(C, [H]),
          (c) => {
            return F(c, [[
              G(A, [H]),
              (d) => {
                return d
              }
            ]])
          }
        ]
      ])
    };
    a(I(C)(I(A)(``)));
    return ``
  };
