----------------------------------------------------destructuring_type_mismatch
component Main {
  fun render : String {
    case "x" {
      true => "a"
      "b" => "b"
      => "c"
    }
  }
}
-------------------------------------------------destructuring_multiple_spreads
component Main {
  fun render : String {
    case [] {
      [...a,...b] => "a"
    }
  }
}
----------------------------------------------------destructuring_type_mismatch
component Main {
  fun render : String {
    case "" {
      [...a,...b] => "a"
    }
  }
}
---------------------------------------------------destructuring_tuple_mismatch
component Main {
  fun render : String {
    case {"a", "b"} {
      {a, b, c} => "a"
    }
  }
}
----------------------------------------------------destructuring_type_mismatch
component Main {
  fun render : String {
    case ("") {
      {a, b} => "a"
    }
  }
}
----------------------------------------------------destructuring_type_mismatch
component Main {
  fun render : String {
    case {"a", "b"} {
      {"a", 0} => "a"
    }
  }
}
----------------------------------------------------destructuring_type_mismatch
component Main {
  fun render : String {
    case {"a", "b"} {
      {{a}, b} => "a"
    }
  }
}
----------------------------------------------------destructuring_type_mismatch
type T {
  A(String)
  B
}

component Main {
  fun render : String {
    if let T.A(a) = "" {
      a
    } else {
      "b"
    }
  }
}
----------------------------------------------------destructuring_type_mismatch
component Main {
  fun render : String {
    let {x, y, z} = "hello"
    ""
  }
}
---------------------------------------------------destructuring_tuple_mismatch
component Main {
  fun render : String {
    let {x, y, z} = {"hello", "a"}
    ""
  }
}
-----------------------------------------------------destructuring_type_missing
component Main {
  fun render : String {
    let Maybe.Just(a) = "" or return ""
    ""
  }
}
---------------------------------------------destructuring_type_variant_missing
type Maybe {
  Nothing
}

component Main {
  fun render : String {
    let Maybe.Just(a) = "" or return ""
    ""
  }
}
-----------------------------------------------------destructuring_no_parameter
type TestType {
  Case2(field1: String, field2: Number)
  Case1
}

component Main {
  fun render : Html {
    let text = case TestType.Case2("case2 text", 1) {
      Case2(field0, field1, field2) => field1
      Case1 => "case1"
    }

    <div>{text}</div>
  }
}
-------------------------------------------------------------------------------
component Main {
  fun render : String {
    case "x" {
      "a" => "a"
      "b" => "b"
      => "c"
    }
  }
}
-------------------------------------------------------------------------------
type Maybe(a) {
  Just(a)
  Nothing
}

component Main {
  fun render : String {
    let Just(a) = Maybe.Just("Hello") or return ""
    a
  }
}
-------------------------------------------------------------------------------
component Main {
  fun render : String {
    case [{"a", "b"}] {
      [{_, _}, ..._] => "a"
      [] => ""
    }
  }
}
-------------------------------------------------------------------------------
type Result(error, value) {
  Err(error)
  Ok(value)
}

component Main {
  fun render : String {
    let object = `{}`

    let Ok([first]) =
      decode object as Array(Object) or return ""

    ""
  }
}
